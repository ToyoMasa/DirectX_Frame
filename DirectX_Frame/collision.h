//======================================================================
//	当たり判定ヘッダ[camera.h]
//
//======================================================================
#ifndef _COLLISION_H_
#define _COLLISION_H_

// 球
class Sphere
{
public:
	D3DXVECTOR3 pos;	// 中心座標
	float rad;			// 半径

	// コンストラクタ
	Sphere()
	{
		rad = 1.0f;
	}
};

// 線
class Line
{
public:
	D3DXVECTOR3 start;	// 始点
	D3DXVECTOR3 end;	// 終点
};

// カプセル
class Capsule
{
public:
	Line line;	// 中心線
	float rad;	// 半径

	// コンストラクタ
	Capsule()
	{
		line.start = D3DXVECTOR3(0, 0, 0);
		line.end = D3DXVECTOR3(0, 1, 0);
		rad = 1.0f;
	}
};

// OBB
class OBB
{
public:
	D3DXVECTOR3 m_Pos;              // 位置
	D3DXVECTOR3 m_NormaDirect[3];   // 方向ベクトル
	float m_fLength[3];             // 各軸方向の長さ
	D3DXVECTOR3 GetDirect(int elem);   // 指定軸番号の方向ベクトルを取得
	float GetLen(int elem);          // 指定軸方向の長さを取得
	D3DXVECTOR3 GetPos();             // 位置を取得

	OBB()
	{
		m_NormaDirect[0] = D3DXVECTOR3(1, 0, 0);
		m_NormaDirect[1] = D3DXVECTOR3(0, 1, 0);
		m_NormaDirect[2] = D3DXVECTOR3(0, 0, 1);
	}
};

//************************************************************************
//	円と円の当たり判定
//	第一引数、第二引数　1つ目の円の中心座標
//	第三引数		  　1つ目の円の半径
//	第四引数、第五引数　2つ目の円の中心座標
//　第六引数			2つ目の円の半径
//	第八引数　サイズ
//************************************************************************
bool isCollisionCircle2D(float x0, float y0, float r0, float x1, float y1, float r1);

//************************************************************************
//	線と線の当たり判定
//	第一引数　1つ目の線の始点
//	第二引数　1つ目の線の終点
//　第三引数　2つ目の線の始点
//　第四引数　2つ目の線の終点	
//************************************************************************
bool isCollisionLine2D(D3DXVECTOR3 r1, D3DXVECTOR3 r2, D3DXVECTOR3 p1, D3DXVECTOR3 p2);

//************************************************************************
//	球と球の当たり判定
//************************************************************************
bool isCollisionSphere(Sphere sphere1, Sphere sphere2);

//************************************************************************
//	OBBと点の当たり判定
//************************************************************************
float LenOBBToPoint(OBB &obb, D3DXVECTOR3 point);

//************************************************************************
//	OBBと球の当たり判定
//************************************************************************
bool isCollisionOBBtoSphere(OBB obb, Sphere sphere);

//************************************************************************
//	OBBとOBBの当たり判定
//************************************************************************
bool isCollisionOBBs(OBB &obb1, OBB &obb2);

//************************************************************************
//	球と平面の当たり判定
//************************************************************************
bool isCollisionSpheretoPlane(Sphere sphere, D3DXVECTOR3 v, D3DXVECTOR3 n);

//************************************************************************
//	線と平面の当たり判定
//************************************************************************
bool isCollisionLinetoPlane(D3DXVECTOR3 v1, D3DXVECTOR3 v2, D3DXVECTOR3 n);

//************************************************************************
//	点と平面の距離を測定
//************************************************************************
float distancePointToPlane(D3DXVECTOR3 vn, D3DXVECTOR3 p1, D3DXVECTOR3 p2);

#endif // !_COLLISION_H_
